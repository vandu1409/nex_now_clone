{
  "version": 3,
  "sources": ["../../@primevue/src/timescircle/TimesCircleIcon.vue", "../../@primevue/src/timescircle/TimesCircleIcon.vue", "../../src/chip/style/ChipStyle.js", "../../src/chip/BaseChip.vue", "../../src/chip/Chip.vue", "../../src/chip/Chip.vue", "../../src/autocomplete/style/AutoCompleteStyle.js", "../../src/autocomplete/BaseAutoComplete.vue", "../../src/autocomplete/AutoComplete.vue", "../../src/autocomplete/AutoComplete.vue"],
  "sourcesContent": ["<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M7 14C5.61553 14 4.26215 13.5895 3.11101 12.8203C1.95987 12.0511 1.06266 10.9579 0.532846 9.67879C0.00303296 8.3997 -0.13559 6.99224 0.134506 5.63437C0.404603 4.2765 1.07129 3.02922 2.05026 2.05026C3.02922 1.07129 4.2765 0.404603 5.63437 0.134506C6.99224 -0.13559 8.3997 0.00303296 9.67879 0.532846C10.9579 1.06266 12.0511 1.95987 12.8203 3.11101C13.5895 4.26215 14 5.61553 14 7C14 8.85652 13.2625 10.637 11.9497 11.9497C10.637 13.2625 8.85652 14 7 14ZM7 1.16667C5.84628 1.16667 4.71846 1.50879 3.75918 2.14976C2.79989 2.79074 2.05222 3.70178 1.61071 4.76768C1.16919 5.83358 1.05367 7.00647 1.27876 8.13803C1.50384 9.26958 2.05941 10.309 2.87521 11.1248C3.69102 11.9406 4.73042 12.4962 5.86198 12.7212C6.99353 12.9463 8.16642 12.8308 9.23232 12.3893C10.2982 11.9478 11.2093 11.2001 11.8502 10.2408C12.4912 9.28154 12.8333 8.15373 12.8333 7C12.8333 5.45291 12.2188 3.96918 11.1248 2.87521C10.0308 1.78125 8.5471 1.16667 7 1.16667ZM4.66662 9.91668C4.58998 9.91704 4.51404 9.90209 4.44325 9.87271C4.37246 9.84333 4.30826 9.8001 4.2544 9.74557C4.14516 9.6362 4.0838 9.48793 4.0838 9.33335C4.0838 9.17876 4.14516 9.0305 4.2544 8.92113L6.17553 7L4.25443 5.07891C4.15139 4.96832 4.09529 4.82207 4.09796 4.67094C4.10063 4.51982 4.16185 4.37563 4.26872 4.26876C4.3756 4.16188 4.51979 4.10066 4.67091 4.09799C4.82204 4.09532 4.96829 4.15142 5.07887 4.25446L6.99997 6.17556L8.92106 4.25446C9.03164 4.15142 9.1779 4.09532 9.32903 4.09799C9.48015 4.10066 9.62434 4.16188 9.73121 4.26876C9.83809 4.37563 9.89931 4.51982 9.90198 4.67094C9.90464 4.82207 9.84855 4.96832 9.74551 5.07891L7.82441 7L9.74554 8.92113C9.85478 9.0305 9.91614 9.17876 9.91614 9.33335C9.91614 9.48793 9.85478 9.6362 9.74554 9.74557C9.69168 9.8001 9.62748 9.84333 9.55669 9.87271C9.4859 9.90209 9.40996 9.91704 9.33332 9.91668C9.25668 9.91704 9.18073 9.90209 9.10995 9.87271C9.03916 9.84333 8.97495 9.8001 8.9211 9.74557L6.99997 7.82444L5.07884 9.74557C5.02499 9.8001 4.96078 9.84333 4.88999 9.87271C4.81921 9.90209 4.74326 9.91704 4.66662 9.91668Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n</template>\n\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'TimesCircleIcon',\n    extends: BaseIcon\n};\n</script>\n", "<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M7 14C5.61553 14 4.26215 13.5895 3.11101 12.8203C1.95987 12.0511 1.06266 10.9579 0.532846 9.67879C0.00303296 8.3997 -0.13559 6.99224 0.134506 5.63437C0.404603 4.2765 1.07129 3.02922 2.05026 2.05026C3.02922 1.07129 4.2765 0.404603 5.63437 0.134506C6.99224 -0.13559 8.3997 0.00303296 9.67879 0.532846C10.9579 1.06266 12.0511 1.95987 12.8203 3.11101C13.5895 4.26215 14 5.61553 14 7C14 8.85652 13.2625 10.637 11.9497 11.9497C10.637 13.2625 8.85652 14 7 14ZM7 1.16667C5.84628 1.16667 4.71846 1.50879 3.75918 2.14976C2.79989 2.79074 2.05222 3.70178 1.61071 4.76768C1.16919 5.83358 1.05367 7.00647 1.27876 8.13803C1.50384 9.26958 2.05941 10.309 2.87521 11.1248C3.69102 11.9406 4.73042 12.4962 5.86198 12.7212C6.99353 12.9463 8.16642 12.8308 9.23232 12.3893C10.2982 11.9478 11.2093 11.2001 11.8502 10.2408C12.4912 9.28154 12.8333 8.15373 12.8333 7C12.8333 5.45291 12.2188 3.96918 11.1248 2.87521C10.0308 1.78125 8.5471 1.16667 7 1.16667ZM4.66662 9.91668C4.58998 9.91704 4.51404 9.90209 4.44325 9.87271C4.37246 9.84333 4.30826 9.8001 4.2544 9.74557C4.14516 9.6362 4.0838 9.48793 4.0838 9.33335C4.0838 9.17876 4.14516 9.0305 4.2544 8.92113L6.17553 7L4.25443 5.07891C4.15139 4.96832 4.09529 4.82207 4.09796 4.67094C4.10063 4.51982 4.16185 4.37563 4.26872 4.26876C4.3756 4.16188 4.51979 4.10066 4.67091 4.09799C4.82204 4.09532 4.96829 4.15142 5.07887 4.25446L6.99997 6.17556L8.92106 4.25446C9.03164 4.15142 9.1779 4.09532 9.32903 4.09799C9.48015 4.10066 9.62434 4.16188 9.73121 4.26876C9.83809 4.37563 9.89931 4.51982 9.90198 4.67094C9.90464 4.82207 9.84855 4.96832 9.74551 5.07891L7.82441 7L9.74554 8.92113C9.85478 9.0305 9.91614 9.17876 9.91614 9.33335C9.91614 9.48793 9.85478 9.6362 9.74554 9.74557C9.69168 9.8001 9.62748 9.84333 9.55669 9.87271C9.4859 9.90209 9.40996 9.91704 9.33332 9.91668C9.25668 9.91704 9.18073 9.90209 9.10995 9.87271C9.03916 9.84333 8.97495 9.8001 8.9211 9.74557L6.99997 7.82444L5.07884 9.74557C5.02499 9.8001 4.96078 9.84333 4.88999 9.87271C4.81921 9.90209 4.74326 9.91704 4.66662 9.91668Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n</template>\n\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'TimesCircleIcon',\n    extends: BaseIcon\n};\n</script>\n", "import { style } from '@primeuix/styles/chip';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: 'p-chip p-component',\n    image: 'p-chip-image',\n    icon: 'p-chip-icon',\n    label: 'p-chip-label',\n    removeIcon: 'p-chip-remove-icon'\n};\n\nexport default BaseStyle.extend({\n    name: 'chip',\n    style,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport ChipStyle from 'primevue/chip/style';\n\nexport default {\n    name: 'BaseChip',\n    extends: BaseComponent,\n    props: {\n        label: {\n            type: [String, Number],\n            default: null\n        },\n        icon: {\n            type: String,\n            default: null\n        },\n        image: {\n            type: String,\n            default: null\n        },\n        removable: {\n            type: Boolean,\n            default: false\n        },\n        removeIcon: {\n            type: String,\n            default: undefined\n        }\n    },\n    style: ChipStyle,\n    provide() {\n        return {\n            $pcChip: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div v-if=\"visible\" :class=\"cx('root')\" :aria-label=\"label\" v-bind=\"ptmi('root')\" :data-p=\"dataP\">\n        <slot>\n            <img v-if=\"image\" :src=\"image\" v-bind=\"ptm('image')\" :class=\"cx('image')\" />\n            <component v-else-if=\"$slots.icon\" :is=\"$slots.icon\" :class=\"cx('icon')\" v-bind=\"ptm('icon')\" />\n            <span v-else-if=\"icon\" :class=\"[cx('icon'), icon]\" v-bind=\"ptm('icon')\" />\n            <div v-if=\"label\" :class=\"cx('label')\" v-bind=\"ptm('label')\">{{ label }}</div>\n        </slot>\n        <slot v-if=\"removable\" name=\"removeicon\" :removeCallback=\"close\" :keydownCallback=\"onKeydown\">\n            <component :is=\"removeIcon ? 'span' : 'TimesCircleIcon'\" :class=\"[cx('removeIcon'), removeIcon]\" @click=\"close\" @keydown=\"onKeydown\" v-bind=\"ptm('removeIcon')\"></component>\n        </slot>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport TimesCircleIcon from '@primevue/icons/timescircle';\nimport BaseChip from './BaseChip.vue';\n\nexport default {\n    name: 'Chip',\n    extends: BaseChip,\n    inheritAttrs: false,\n    emits: ['remove'],\n    data() {\n        return {\n            visible: true\n        };\n    },\n    methods: {\n        onKeydown(event) {\n            if (event.key === 'Enter' || event.key === 'Backspace') {\n                this.close(event);\n            }\n        },\n        close(event) {\n            this.visible = false;\n            this.$emit('remove', event);\n        }\n    },\n    computed: {\n        dataP() {\n            return cn({\n                removable: this.removable\n            });\n        }\n    },\n    components: {\n        TimesCircleIcon\n    }\n};\n</script>\n", "<template>\n    <div v-if=\"visible\" :class=\"cx('root')\" :aria-label=\"label\" v-bind=\"ptmi('root')\" :data-p=\"dataP\">\n        <slot>\n            <img v-if=\"image\" :src=\"image\" v-bind=\"ptm('image')\" :class=\"cx('image')\" />\n            <component v-else-if=\"$slots.icon\" :is=\"$slots.icon\" :class=\"cx('icon')\" v-bind=\"ptm('icon')\" />\n            <span v-else-if=\"icon\" :class=\"[cx('icon'), icon]\" v-bind=\"ptm('icon')\" />\n            <div v-if=\"label\" :class=\"cx('label')\" v-bind=\"ptm('label')\">{{ label }}</div>\n        </slot>\n        <slot v-if=\"removable\" name=\"removeicon\" :removeCallback=\"close\" :keydownCallback=\"onKeydown\">\n            <component :is=\"removeIcon ? 'span' : 'TimesCircleIcon'\" :class=\"[cx('removeIcon'), removeIcon]\" @click=\"close\" @keydown=\"onKeydown\" v-bind=\"ptm('removeIcon')\"></component>\n        </slot>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport TimesCircleIcon from '@primevue/icons/timescircle';\nimport BaseChip from './BaseChip.vue';\n\nexport default {\n    name: 'Chip',\n    extends: BaseChip,\n    inheritAttrs: false,\n    emits: ['remove'],\n    data() {\n        return {\n            visible: true\n        };\n    },\n    methods: {\n        onKeydown(event) {\n            if (event.key === 'Enter' || event.key === 'Backspace') {\n                this.close(event);\n            }\n        },\n        close(event) {\n            this.visible = false;\n            this.$emit('remove', event);\n        }\n    },\n    computed: {\n        dataP() {\n            return cn({\n                removable: this.removable\n            });\n        }\n    },\n    components: {\n        TimesCircleIcon\n    }\n};\n</script>\n", "import { style } from '@primeuix/styles/autocomplete';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst inlineStyles = {\n    root: { position: 'relative' }\n};\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-autocomplete p-component p-inputwrapper',\n        {\n            'p-disabled': props.disabled,\n            'p-invalid': instance.$invalid,\n            'p-focus': instance.focused,\n            'p-inputwrapper-filled': instance.$filled || isNotEmpty(instance.inputValue),\n            'p-inputwrapper-focus': instance.focused,\n            'p-autocomplete-open': instance.overlayVisible,\n            'p-autocomplete-fluid': instance.$fluid\n        }\n    ],\n    pcInputText: 'p-autocomplete-input',\n    inputMultiple: ({ instance }) => [\n        'p-autocomplete-input-multiple',\n        {\n            'p-variant-filled': instance.$variant === 'filled'\n        }\n    ],\n    chipItem: ({ instance, i }) => [\n        'p-autocomplete-chip-item',\n        {\n            'p-focus': instance.focusedMultipleOptionIndex === i\n        }\n    ],\n    pcChip: 'p-autocomplete-chip',\n    chipIcon: 'p-autocomplete-chip-icon',\n    inputChip: 'p-autocomplete-input-chip',\n    loader: 'p-autocomplete-loader',\n    dropdown: 'p-autocomplete-dropdown',\n    overlay: 'p-autocomplete-overlay p-component',\n    listContainer: 'p-autocomplete-list-container',\n    list: 'p-autocomplete-list',\n    optionGroup: 'p-autocomplete-option-group',\n    option: ({ instance, option, i, getItemOptions }) => [\n        'p-autocomplete-option',\n        {\n            'p-autocomplete-option-selected': instance.isSelected(option),\n            'p-focus': instance.focusedOptionIndex === instance.getOptionIndex(i, getItemOptions),\n            'p-disabled': instance.isOptionDisabled(option)\n        }\n    ],\n    emptyMessage: 'p-autocomplete-empty-message'\n};\n\nexport default BaseStyle.extend({\n    name: 'autocomplete',\n    style,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport AutoCompleteStyle from 'primevue/autocomplete/style';\n\nexport default {\n    name: 'BaseAutoComplete',\n    extends: BaseInput,\n    props: {\n        suggestions: {\n            type: Array,\n            default: null\n        },\n        optionLabel: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        dropdown: {\n            type: Boolean,\n            default: false\n        },\n        dropdownMode: {\n            type: String,\n            default: 'blank'\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        dataKey: {\n            type: String,\n            default: null\n        },\n        minLength: {\n            type: Number,\n            default: 1\n        },\n        delay: {\n            type: Number,\n            default: 300\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        forceSelection: {\n            type: Boolean,\n            default: false\n        },\n        completeOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelStyle: {\n            type: Object,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        overlayStyle: {\n            type: Object,\n            default: null\n        },\n        overlayClass: {\n            type: [String, Object],\n            default: null\n        },\n        dropdownIcon: {\n            type: String,\n            default: null\n        },\n        dropdownClass: {\n            type: [String, Object],\n            default: null\n        },\n        loader: {\n            type: String,\n            default: null\n        },\n        loadingIcon: {\n            type: String,\n            default: null\n        },\n        removeTokenIcon: {\n            type: String,\n            default: null\n        },\n        chipIcon: {\n            type: String,\n            default: null\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        searchLocale: {\n            type: String,\n            default: undefined\n        },\n        searchMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySearchMessage: {\n            type: String,\n            default: null\n        },\n        showEmptyMessage: {\n            type: Boolean,\n            default: true\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        typeahead: {\n            type: Boolean,\n            default: true\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: AutoCompleteStyle,\n    provide() {\n        return {\n            $pcAutoComplete: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" :data-p=\"containerDataP\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :name=\"$formName\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :defaultValue=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :fluid=\"$fluid\"\n            :disabled=\"disabled\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :data-p-has-dropdown=\"dropdown\"\n            :pt=\"ptm('pcInputText')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            :data-p-has-dropdown=\"dropdown\"\n            :data-p=\"inputMultipleDataP\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of d_value\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"$id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"d_value.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip\n                        :class=\"cx('pcChip')\"\n                        :label=\"getOptionLabel(option)\"\n                        :removeIcon=\"chipIcon || removeTokenIcon\"\n                        removable\n                        :unstyled=\"unstyled\"\n                        @remove=\"removeOption($event, i)\"\n                        :data-p-focused=\"focusedMultipleOptionIndex === i\"\n                        :pt=\"ptm('pcChip')\"\n                    >\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"$id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" :data-p-has-dropdown=\"dropdown\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" :data-p-has-dropdown=\"dropdown\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span v-if=\"typeahead\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div\n                    v-if=\"overlayVisible\"\n                    :ref=\"overlayRef\"\n                    :id=\"panelId\"\n                    :class=\"[cx('overlay'), panelClass, overlayClass]\"\n                    :style=\"{ ...panelStyle, ...overlayStyle }\"\n                    @click=\"onOverlayClick\"\n                    @keydown=\"onOverlayKeyDown\"\n                    :data-p=\"overlayDataP\"\n                    v-bind=\"ptm('overlay')\"\n                >\n                    <slot name=\"header\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"$id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"showEmptyMessage && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { absolutePosition, addStyle, findSingle, focus, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    startRangeIndex: -1,\n    data() {\n        return {\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n                !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    option,\n                    index,\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput?.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput?.$el?.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) {\n                        this.$refs.focusInput.value = '';\n                    } else {\n                        const inputEl = this.$refs.focusInput?.$el;\n                        inputEl && (inputEl.value = '');\n                    }\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                let target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n\n                focus(target);\n                query = target.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.d_value || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                if (this.multiple && event.shiftKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.$filled) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.d_value.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n            const metaKey = event.metaKey || event.ctrlKey;\n            const optionIndex = this.findFirstOptionIndex();\n\n            if (this.multiple && event.shiftKey && metaKey) {\n                this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n            }\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n            const metaKey = event.metaKey || event.ctrlKey;\n            const optionIndex = this.findLastOptionIndex();\n\n            if (this.multiple && event.shiftKey && metaKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    if (event.target.value.trim()) {\n                        this.updateModel(event, [...(this.d_value || []), event.target.value.trim()]);\n                        this.$refs.focusInput.value = '';\n                    }\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        if (this.multiple && event.shiftKey) {\n                            this.onOptionSelectRange(event, this.focusedOptionIndex);\n                            event.preventDefault();\n                        } else {\n                            this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                        }\n                    }\n\n                    this.hide();\n                }\n            }\n        },\n        onSpaceKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onEnterKey(event);\n            }\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n                    const removedValue = this.d_value[this.d_value.length - 1];\n                    const newValue = this.d_value.slice(0, -1);\n\n                    this.writeValue(newValue, event);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0' });\n            this.alignOverlay();\n\n            // Issue: #7508\n            this.$attrSelector && el.setAttribute(this.$attrSelector, '');\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener, true);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener, true);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.d_value || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.d_value, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.d_value[index];\n            const value = this.d_value.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.$id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (this.$filled) {\n                if (typeof this.d_value === 'object') {\n                    const label = this.getOptionLabel(this.d_value);\n\n                    return label != null ? label : this.d_value;\n                } else {\n                    return this.d_value;\n                }\n            } else {\n                return '';\n            }\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            // @todo: The 'optionValue' properties can be added.\n            return this.dataKey;\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.$id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.$id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.$id + '_panel';\n        },\n        containerDataP() {\n            return cn({\n                fluid: this.$fluid\n            });\n        },\n        overlayDataP() {\n            return cn({\n                ['portal-' + this.appendTo]: 'portal-' + this.appendTo\n            });\n        },\n        inputMultipleDataP() {\n            return cn({\n                invalid: this.$invalid,\n                disabled: this.disabled,\n                focus: this.focused,\n                fluid: this.$fluid,\n                filled: this.$variant === 'filled',\n                empty: !this.$filled,\n                [this.size]: this.size\n            });\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" :data-p=\"containerDataP\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :name=\"$formName\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :defaultValue=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :fluid=\"$fluid\"\n            :disabled=\"disabled\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :data-p-has-dropdown=\"dropdown\"\n            :pt=\"ptm('pcInputText')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            :data-p-has-dropdown=\"dropdown\"\n            :data-p=\"inputMultipleDataP\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of d_value\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"$id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"d_value.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip\n                        :class=\"cx('pcChip')\"\n                        :label=\"getOptionLabel(option)\"\n                        :removeIcon=\"chipIcon || removeTokenIcon\"\n                        removable\n                        :unstyled=\"unstyled\"\n                        @remove=\"removeOption($event, i)\"\n                        :data-p-focused=\"focusedMultipleOptionIndex === i\"\n                        :pt=\"ptm('pcChip')\"\n                    >\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"$id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" :data-p-has-dropdown=\"dropdown\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" :data-p-has-dropdown=\"dropdown\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span v-if=\"typeahead\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div\n                    v-if=\"overlayVisible\"\n                    :ref=\"overlayRef\"\n                    :id=\"panelId\"\n                    :class=\"[cx('overlay'), panelClass, overlayClass]\"\n                    :style=\"{ ...panelStyle, ...overlayStyle }\"\n                    @click=\"onOverlayClick\"\n                    @keydown=\"onOverlayKeyDown\"\n                    :data-p=\"overlayDataP\"\n                    v-bind=\"ptm('overlay')\"\n                >\n                    <slot name=\"header\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"$id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                            v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                        >\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"showEmptyMessage && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"d_value\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { absolutePosition, addStyle, findSingle, focus, getOuterWidth, isTouchDevice, relativePosition } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isEmpty, isNotEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    startRangeIndex: -1,\n    data() {\n        return {\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n                !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    option,\n                    index,\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput?.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n            this.formField.onBlur?.();\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput?.$el?.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) {\n                        this.$refs.focusInput.value = '';\n                    } else {\n                        const inputEl = this.$refs.focusInput?.$el;\n                        inputEl && (inputEl.value = '');\n                    }\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                let target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n\n                focus(target);\n                query = target.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.d_value || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                if (this.multiple && event.shiftKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.$filled) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.d_value.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n            const metaKey = event.metaKey || event.ctrlKey;\n            const optionIndex = this.findFirstOptionIndex();\n\n            if (this.multiple && event.shiftKey && metaKey) {\n                this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n            }\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n            const metaKey = event.metaKey || event.ctrlKey;\n            const optionIndex = this.findLastOptionIndex();\n\n            if (this.multiple && event.shiftKey && metaKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    if (event.target.value.trim()) {\n                        this.updateModel(event, [...(this.d_value || []), event.target.value.trim()]);\n                        this.$refs.focusInput.value = '';\n                    }\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        if (this.multiple && event.shiftKey) {\n                            this.onOptionSelectRange(event, this.focusedOptionIndex);\n                            event.preventDefault();\n                        } else {\n                            this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                        }\n                    }\n\n                    this.hide();\n                }\n            }\n        },\n        onSpaceKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onEnterKey(event);\n            }\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n                    const removedValue = this.d_value[this.d_value.length - 1];\n                    const newValue = this.d_value.slice(0, -1);\n\n                    this.writeValue(newValue, event);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0' });\n            this.alignOverlay();\n\n            // Issue: #7508\n            this.$attrSelector && el.setAttribute(this.$attrSelector, '');\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener, true);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener, true);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.d_value || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.d_value, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.d_value[index];\n            const value = this.d_value.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.$id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (this.$filled) {\n                if (typeof this.d_value === 'object') {\n                    const label = this.getOptionLabel(this.d_value);\n\n                    return label != null ? label : this.d_value;\n                } else {\n                    return this.d_value;\n                }\n            } else {\n                return '';\n            }\n        },\n        // @deprecated use $filled instead.\n        hasSelectedOption() {\n            return this.$filled;\n        },\n        equalityKey() {\n            // @todo: The 'optionValue' properties can be added.\n            return this.dataKey;\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.$id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.$id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.$id + '_panel';\n        },\n        containerDataP() {\n            return cn({\n                fluid: this.$fluid\n            });\n        },\n        overlayDataP() {\n            return cn({\n                ['portal-' + this.appendTo]: 'portal-' + this.appendTo\n            });\n        },\n        inputMultipleDataP() {\n            return cn({\n                invalid: this.$invalid,\n                disabled: this.disabled,\n                focus: this.focused,\n                fluid: this.$fluid,\n                filled: this.$variant === 'filled',\n                empty: !this.$filled,\n                [this.size]: this.size\n            });\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["script", "name", "BaseIcon", "_openBlock", "_createElementBlock", "_mergeProps", "width", "height", "viewBox", "fill", "xmlns", "_ctx", "pti", "_cache", "_createElementVNode", "d", "classes", "root", "image", "icon", "label", "removeIcon", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "label", "type", "String", "Number", "icon", "image", "removable", "Boolean", "removeIcon", "undefined", "style", "ChipStyle", "provide", "$pcChip", "$parentInstance", "script", "BaseChip", "inheritAttrs", "emits", "data", "visible", "methods", "onKeydown", "event", "key", "close", "$emit", "computed", "dataP", "cn", "components", "TimesCircleIcon", "$data", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "$options", "_renderSlot", "src", "ptm", "$slots", "_createBlock", "_resolveDynamicComponent", "removeCallback", "keydownCallback", "onClick", "inlineStyles", "root", "position", "classes", "_ref", "instance", "props", "disabled", "$invalid", "focused", "$filled", "isNotEmpty", "inputValue", "overlayVisible", "$fluid", "pcInputText", "inputMultiple", "_ref2", "$variant", "chipItem", "_ref3", "i", "focusedMultipleOptionIndex", "pcChip", "chipIcon", "inputChip", "loader", "dropdown", "overlay", "listContainer", "list", "optionGroup", "option", "_ref4", "getItemOptions", "isSelected", "focusedOptionIndex", "getOptionIndex", "isOptionDisabled", "emptyMessage", "BaseStyle", "extend", "name", "style", "script$1", "name", "BaseInput", "props", "suggestions", "type", "Array", "optionLabel", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "scrollHeight", "String", "dropdown", "Boolean", "dropdownMode", "multiple", "loading", "placeholder", "dataKey", "minLength", "Number", "delay", "appendTo", "Object", "forceSelection", "completeOnFocus", "inputId", "inputStyle", "inputClass", "panelStyle", "panelClass", "overlayStyle", "overlayClass", "dropdownIcon", "dropdownClass", "loader", "loadingIcon", "removeTokenIcon", "chipIcon", "virtualScrollerOptions", "autoOptionFocus", "selectOnFocus", "focusOnHover", "searchLocale", "undefined", "searchMessage", "selectionMessage", "emptySelectionMessage", "emptySearchMessage", "showEmptyMessage", "tabindex", "typeahead", "ariaLabel", "ariaLabelledby", "style", "AutoCompleteStyle", "provide", "$pcAutoComplete", "$parentInstance", "script", "BaseAutoComplete", "inheritAttrs", "emits", "inject", "$pcFluid", "outsideClickListener", "resizeListener", "scrollHandler", "overlay", "virtualScroller", "searchTimeout", "dirty", "startRangeIndex", "data", "clicked", "focused", "focusedOptionIndex", "focusedMultipleOptionIndex", "overlayVisible", "searching", "watch", "show", "findFirstFocusedOptionIndex", "visibleOptions", "length", "hide", "autoUpdateModel", "mounted", "updated", "alignOverlay", "beforeUnmount", "unbindOutsideClickListener", "unbindResizeListener", "destroy", "ZIndex", "clear", "methods", "getOptionIndex", "index", "fn", "virtualScrollerDisabled", "getOptionLabel", "option", "resolveFieldData", "getOptionValue", "getOptionRenderKey", "getPTOptions", "itemOptions", "key", "ptm", "context", "selected", "isSelected", "disabled", "isOptionDisabled", "isOptionGroup", "optionGroup", "group", "getOptionGroupLabel", "getOptionGroupChildren", "getAriaPosInset", "_this", "slice", "filter", "isFocus", "$emit", "focus", "$refs", "focusInput", "$el", "_this2", "_hide", "_this2$$refs$focusInp", "setTimeout", "onFocus", "event", "search", "target", "value", "scrollInView", "onBlur", "_this$formField$onBlu", "_this$formField", "formField", "call", "onKeyDown", "preventDefault", "code", "onArrowDownKey", "onArrowUpKey", "onArrowLeftKey", "onArrowRightKey", "onHomeKey", "onEndKey", "onPageDownKey", "onPageUpKey", "onEnterKey", "onSpaceKey", "onEscapeKey", "onTabKey", "onShiftKey", "onBackspaceKey", "onInput", "_this3", "clearTimeout", "query", "updateModel", "onChange", "_this4", "valid", "_this$$refs$focusInpu", "matchedValue", "find", "isOptionMatched", "onOptionSelect", "_this$$refs$focusInpu2", "inputEl", "onMultipleContainerFocus", "onMultipleContainerBlur", "onMultipleContainerKeyDown", "onArrowLeftKeyOnMultiple", "onArrowRightKeyOnMultiple", "onBackspaceKeyOnMultiple", "onContainerClick", "isDropdownClicked", "contains", "onDropdownClick", "originalEvent", "isHide", "arguments", "concat", "_toConsumableArray", "d_value", "onOptionMouseMove", "changeFocusedOptionIndex", "onOptionSelectRange", "_this5", "start", "end", "findNearestSelectedOptionIndex", "rangeStart", "Math", "min", "rangeEnd", "max", "isValidOption", "map", "onOverlayClick", "OverlayEventBus", "emit", "onOverlayKeyDown", "optionIndex", "findNextOptionIndex", "findFirstOptionIndex", "shiftKey", "altKey", "findPrevOptionIndex", "findLastOptionIndex", "findLastFocusedOptionIndex", "currentTarget", "isEmpty", "$filled", "multiContainer", "stopPropagation", "len", "metaKey", "ctrlKey", "setSelectionRange", "trim", "isNotEmpty", "removedValue", "newValue", "writeValue", "removeOption", "onOverlayEnter", "el", "set", "$primevue", "config", "zIndex", "addStyle", "position", "top", "$attrSelector", "setAttribute", "onOverlayAfterEnter", "bindOutsideClickListener", "bindScrollListener", "bindResizeListener", "onOverlayLeave", "unbindScrollListener", "onOverlayAfterLeave", "relativePosition", "minWidth", "getOuterWidth", "absolutePosition", "_this6", "isOutsideClicked", "document", "addEventListener", "removeEventListener", "_this7", "ConnectedOverlayScrollHandler", "container", "_this8", "isTouchDevice", "window", "isInputClicked", "dropdownButton", "_this$getOptionLabel", "toLocaleLowerCase", "isValidSelectedOption", "isEquals", "value1", "value2", "equals", "equalityKey", "_this9", "optionValue", "some", "_this0", "findIndex", "_this1", "findLastIndex", "_this10", "matchedOptionIndex", "_this11", "findSelectedOptionIndex", "_this12", "selectedIndex", "source", "_this13", "removedOption", "_", "i", "_this14", "$nextTick", "id", "$id", "focusedOptionId", "element", "findSingle", "list", "scrollIntoView", "block", "inline", "scrollToIndex", "flatOptions", "options", "_this15", "reduce", "result", "push", "forEach", "o", "overlayRef", "listRef", "contentRef", "virtualScrollerRef", "findNextSelectedOptionIndex", "_this16", "findPrevSelectedOptionIndex", "_this17", "firstCheckUp", "computed", "inputValue", "_typeof", "label", "hasSelectedOption", "searchResultMessageText", "searchMessageText", "replaceAll", "emptySearchMessageText", "locale", "selectionMessageText", "emptySelectionMessageText", "selectedMessageText", "listAriaLabel", "aria", "listLabel", "focusedMultipleOptionId", "ariaSetSize", "_this18", "panelId", "containerDataP", "cn", "fluid", "$fluid", "overlayDataP", "_defineProperty", "inputMultipleDataP", "invalid", "$invalid", "filled", "$variant", "empty", "size", "components", "InputText", "VirtualScroller", "Portal", "ChevronDownIcon", "SpinnerIcon", "Chip", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "_ctx", "cx", "sx", "onClick", "$options", "apply", "ptmi", "_createBlock", "_component_InputText", "$formName", "_normalizeClass", "defaultValue", "variant", "autocomplete", "role", "$data", "onKeydown", "unstyled", "pt", "_Fragment", "_renderList", "_renderSlot", "removeCallback", "_createVNode", "_component_Chip", "removeIcon", "removable", "onRemove", "$event", "removeicon", "$slots", "chipicon", "_createElementVNode", "_hoisted_4", "_hoisted_2", "_hoisted_5", "_component_SpinnerIcon", "spin", "toggleCallback", "_resolveDynamicComponent", "_component_Portal", "_Transition", "onEnter", "onAfterEnter", "onLeave", "onAfterLeave", "_objectSpread", "_component_VirtualScroller", "items", "content", "_withCtx", "_ref", "styleClass", "getItemOptions", "contentStyle", "itemSize", "height", "_withDirectives", "onMousemove", "_createTextVNode", "_toDisplayString", "_ref2"]
}
